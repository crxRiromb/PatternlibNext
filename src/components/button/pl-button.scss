@use 'sass:map';
@use '/src/styles/reset-styles';
@use '/src/styles/theming';
@use '/src/styles/base-mixins' as base;
@use '/src/styles/flex-mixins' as flex;
@use 'pl-button.theme' as theme;

/* Generate all CSS Custom Properties for this component in the shadow DOM */
:host {
  display: inline-block;

  // Default
  $theme-palette: map.get(theme.$button-themes, 'corporate', 'light');
  @each $variant-name, $variant-config in theme.$button-variants {
    @include theming.generate-component-variant-theme('button', $variant-name, $variant-config, $theme-palette);
  }

  // Override the palette when attributes are set directly on the host.
  &[data-theme='corporate'][data-mode='dark'] {
    $theme-palette: map.get(theme.$button-themes, 'corporate', 'dark');
    @each $variant-name, $variant-config in theme.$button-variants {
      @include theming.generate-component-variant-theme('button', $variant-name, $variant-config, $theme-palette);
    }
  }
  &[data-theme='hau'][data-mode='light'] {
    $theme-palette: map.get(theme.$button-themes, 'hau', 'light');
    @each $variant-name, $variant-config in theme.$button-variants {
      @include theming.generate-component-variant-theme('button', $variant-name, $variant-config, $theme-palette);
    }
  }
  &[data-theme='hau'][data-mode='dark'] {
    $theme-palette: map.get(theme.$button-themes, 'hau', 'dark');
    @each $variant-name, $variant-config in theme.$button-variants {
      @include theming.generate-component-variant-theme('button', $variant-name, $variant-config, $theme-palette);
    }
  }
}

/* --- Variant - Primary --- */
button {
  --current-bg: var(--color-primary-background);
  --current-border: var(--color-primary-border);
  --current-text: var(--color-primary-text);
  --current-bg-hover: var(--color-primary-background-hover);
  --current-border-hover: var(--color-primary-border-hover);
  --current-text-hover: var(--color-primary-text-hover);
  --current-bg-active: var(--color-primary-background-active);
  --current-border-active: var(--color-primary-border-active);
  --current-text-active: var(--color-primary-text-active);
  --current-border-focus: var(--color-primary-border-focus);

  @include base.font-bold-smaller;
  text-transform: uppercase;

  @include flex.flex-center;
  height: 48px;
  padding-left: 36px;
  padding-right: 36px;
  border: 1px solid transparent;
  border-radius: 0;
  color: black;
  cursor: pointer;

  background-color: var(--current-bg);
  border: 1px solid var(--current-border);
  color: var(--current-text);
  // background-color: blue; /* for testing */

  &:hover {
    background-color: var(--current-bg-hover);
    border-color: var(--current-border-hover);
    color: var(--current-text-hover);
  }
  &:active {
    background-color: var(--current-bg-active);
    border-color: var(--current-border-active);
    color: var(--current-text-active);
  }
  &:focus-visible {
    outline: 3px solid var(--current-border-focus);
    outline-offset: -3px;
  }
}

/* --- Variant - Secondary,Error --- */
:host([variant='secondary']) button {
  --current-bg: var(--color-secondary-background);
  --current-border: var(--color-secondary-border);
  --current-text: var(--color-secondary-text);
  --current-bg-hover: var(--color-secondary-background-hover);
  --current-border-hover: var(--color-secondary-border-hover);
  --current-text-hover: var(--color-secondary-text-hover);
  --current-bg-active: var(--color-secondary-background-active);
  --current-border-active: var(--color-secondary-border-active);
  --current-text-active: var(--color-secondary-text-active);
  --current-border-focus: var(--color-secondary-border-focus);
  &:hover {
    background-color: var(--current-bg-hover);
    border-color: var(--current-border-hover);
    color: var(--current-text-hover);
  }
  &:active {
    background-color: var(--current-bg-active);
    border-color: var(--current-border-active);
    color: var(--current-text-active);
  }
  &:focus-visible {
    outline: 3px solid var(--current-border-focus);
    outline-offset: -3px;
  }
}
:host([variant='error']) button {
  --current-bg: var(--color-error-background);
  --current-border: var(--color-error-border);
  --current-text: var(--color-error-text);
  --current-bg-hover: var(--color-error-background-hover);
  --current-border-hover: var(--color-error-border-hover);
  --current-text-hover: var(--color-error-text-hover);
  --current-bg-active: var(--color-error-background-active);
  --current-border-active: var(--color-error-border-active);
  --current-text-active: var(--color-error-text-active);
  --current-border-focus: var(--color-error-border-focus);
  &:hover {
    background-color: var(--current-bg-hover);
    border-color: var(--current-border-hover);
    color: var(--current-text-hover);
  }
  &:active {
    background-color: var(--current-bg-active);
    border-color: var(--current-border-active);
    color: var(--current-text-active);
  }
  &:focus-visible {
    outline: 3px solid var(--current-border-focus);
    outline-offset: -3px;
  }
}

/* --- State - Disabled --- */
:host([disabled][variant='primary']) button {
  background-color: var(--color-primary-background-disabled);
  border-color: var(--color-primary-border-disabled);
  color: var(--color-primary-text-disabled);
  cursor: not-allowed;
}
:host([disabled][variant='secondary']) button {
  background-color: var(--color-secondary-background-disabled);
  border-color: var(--color-secondary-border-disabled);
  color: var(--color-secondary-text-disabled);
  cursor: not-allowed;
}
:host([disabled][variant='error']) button {
  background-color: var(--color-error-background-disabled);
  border-color: var(--color-error-border-disabled);
  color: var(--color-error-text-disabled);
  cursor: not-allowed;
}
