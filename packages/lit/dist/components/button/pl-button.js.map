{"version":3,"file":"pl-button.js","sources":["../../../src/components/button/pl-button.ts"],"sourcesContent":["import { IdUtils } from '@src/utils/id';\nimport { css, html, unsafeCSS } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { PlBase } from '../base/pl-base';\nimport buttonStyles from './pl-button.scss?inline';\nimport fontStyles from '@styles/fonts.css?inline';\n\nexport type PlButtonClickEvent = CustomEvent<void>;\ninterface PlButtonState {\n  isLoading: boolean;\n  disabled: boolean;\n  label: string;\n  type: 'button' | 'submit';\n  variant: 'primary' | 'secondary' | 'error';\n}\n\n/**\n * The pl-button is the standard button for all interactive actions\n * in the library. It supports various visual variants and states.\n *\n * @slot - The default slot for the button's text (an alternative to the `label` attribute).\n *\n * @event pl-button-click - Fired when the user clicks the button. Contains no `detail` data.\n *\n * @csspart button - The native `<button>` element inside the component.\n */\n@customElement('pl-button')\nexport class PlButton extends PlBase {\n  /** @internal */\n  @state()\n  private _state: PlButtonState = {\n    isLoading: false,\n    disabled: false,\n    label: '',\n    type: 'button',\n    variant: 'primary',\n  };\n\n  /**\n   * Whether the button is disabled.\n   * @type {boolean}\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled?: boolean;\n\n  /**\n   * The label for the button.\n   * @type {string}\n   */\n  @property({ type: String, reflect: true })\n  label?: string;\n\n  /**\n   * The type of the button.\n   * @type {'button' | 'submit'}\n   */\n  @property({ type: String, reflect: true })\n  type?: 'button' | 'submit';\n\n  /**\n   * The variant of the button.\n   * Can be 'primary', 'secondary', or 'error'.\n   * @type {string}\n   */\n  @property({ type: String, reflect: true })\n  variant?: 'primary' | 'secondary' | 'error';\n\n  static styles = css`\n    ${unsafeCSS(fontStyles)}\n    ${unsafeCSS(buttonStyles)}\n  `;\n\n  /*\n   * Called between changes with attributes and render()\n   */\n  willUpdate(changedProperties: Map<string, unknown>) {\n    const newState: Partial<PlButtonState> = {};\n\n    // update for the internal state.\n    if (changedProperties.has('disabled')) {\n      newState.disabled = this.disabled ?? this._state.disabled;\n    }\n    if (changedProperties.has('label')) {\n      newState.label = this.label ?? this._state.label;\n    }\n    if (changedProperties.has('type')) {\n      newState.type = this.type ?? this._state.type;\n    }\n    if (changedProperties.has('variant')) {\n      newState.variant = this.variant ?? this._state.variant;\n    }\n\n    // trigger change detection\n    if (Object.keys(newState).length > 0) {\n      this._state = { ...this._state, ...newState };\n    }\n  }\n\n  render() {\n    console.log(\n      'Rendering PlButton with RTL/Light/Dark/Id:',\n      this.isRTL(),\n      this.isLightMode(),\n      this.isDarkMode(),\n      IdUtils.generateId()\n    );\n\n    return html`\n      <button\n        data-testid=\"button\"\n        part=\"button\"\n        type=${this._state.type}\n        ?disabled=${this._state.disabled || this._state.isLoading}\n        @click=${this._handleClick}\n      >\n        ${this._state.label ? html`${this._state.label}` : html`<slot></slot>`}\n      </button>\n    `;\n  }\n\n  private _handleClick(event: MouseEvent) {\n    if (this._state.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n    this._emitEvent('pl-button-click');\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'pl-button': PlButton;\n  }\n  interface HTMLElementEventMap {\n    'pl-button-click': PlButtonClickEvent;\n  }\n}\n"],"names":["PlButton","PlBase","changedProperties","newState","IdUtils","html","event","css","unsafeCSS","fontStyles","buttonStyles","__decorateClass","state","property","customElement"],"mappings":";;;;;;;;;;;AA2BO,IAAMA,IAAN,cAAuBC,EAAO;AAAA,EAA9B,cAAA;AAAA,UAAA,GAAA,SAAA,GAGL,KAAQ,SAAwB;AAAA,MAC9B,WAAW;AAAA,MACX,UAAU;AAAA,MACV,OAAO;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,IAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAuCA,WAAWC,GAAyC;AAClD,UAAMC,IAAmC,CAAA;AAGzC,IAAID,EAAkB,IAAI,UAAU,MAClCC,EAAS,WAAW,KAAK,YAAY,KAAK,OAAO,WAE/CD,EAAkB,IAAI,OAAO,MAC/BC,EAAS,QAAQ,KAAK,SAAS,KAAK,OAAO,QAEzCD,EAAkB,IAAI,MAAM,MAC9BC,EAAS,OAAO,KAAK,QAAQ,KAAK,OAAO,OAEvCD,EAAkB,IAAI,SAAS,MACjCC,EAAS,UAAU,KAAK,WAAW,KAAK,OAAO,UAI7C,OAAO,KAAKA,CAAQ,EAAE,SAAS,MACjC,KAAK,SAAS,EAAE,GAAG,KAAK,QAAQ,GAAGA,EAAA;AAAA,EAEvC;AAAA,EAEA,SAAS;AACP,mBAAQ;AAAA,MACN;AAAA,MACA,KAAK,MAAA;AAAA,MACL,KAAK,YAAA;AAAA,MACL,KAAK,WAAA;AAAA,MACLC,EAAQ,WAAA;AAAA,IAAW,GAGdC;AAAA;AAAA;AAAA;AAAA,eAII,KAAK,OAAO,IAAI;AAAA,oBACX,KAAK,OAAO,YAAY,KAAK,OAAO,SAAS;AAAA,iBAChD,KAAK,YAAY;AAAA;AAAA,UAExB,KAAK,OAAO,QAAQA,IAAO,KAAK,OAAO,KAAK,KAAKA,gBAAmB;AAAA;AAAA;AAAA,EAG5E;AAAA,EAEQ,aAAaC,GAAmB;AACtC,QAAI,KAAK,OAAO,UAAU;AACxB,MAAAA,EAAM,eAAA,GACNA,EAAM,gBAAA;AACN;AAAA,IACF;AACA,SAAK,WAAW,iBAAiB;AAAA,EACnC;AACF;AArGaN,EAwCJ,SAASO;AAAA,MACZC,EAAUC,CAAU,CAAC;AAAA,MACrBD,EAAUE,CAAY,CAAC;AAAA;AAvCnBC,EAAA;AAAA,EADPC,EAAA;AAAM,GAFIZ,EAGH,WAAA,UAAA,CAAA;AAaRW,EAAA;AAAA,EADCE,EAAS,EAAE,MAAM,SAAS,SAAS,IAAM;AAAA,GAf/Bb,EAgBX,WAAA,YAAA,CAAA;AAOAW,EAAA;AAAA,EADCE,EAAS,EAAE,MAAM,QAAQ,SAAS,IAAM;AAAA,GAtB9Bb,EAuBX,WAAA,SAAA,CAAA;AAOAW,EAAA;AAAA,EADCE,EAAS,EAAE,MAAM,QAAQ,SAAS,IAAM;AAAA,GA7B9Bb,EA8BX,WAAA,QAAA,CAAA;AAQAW,EAAA;AAAA,EADCE,EAAS,EAAE,MAAM,QAAQ,SAAS,IAAM;AAAA,GArC9Bb,EAsCX,WAAA,WAAA,CAAA;AAtCWA,IAANW,EAAA;AAAA,EADNG,EAAc,WAAW;AAAA,GACbd,CAAA;"}