{"version":3,"file":"pl-base.js","sources":["../../../src/components/base/pl-base.ts"],"sourcesContent":["import { LitElement } from 'lit';\r\n\r\n/**\r\n * A base class for all components in the application.\r\n */\r\nexport class PlBase extends LitElement {\r\n  /**\r\n   * Checks if the current element is in light mode.\r\n   * @returns True if the mode is light, false if dark.\r\n   */\r\n  public isLightMode(): boolean {\r\n    // Closest ancestor with a data-mode attribute\r\n    // Hint: closest() is the direct programmatic counterpart to your :host-context selector.\r\n    const modeElement = this.closest('[data-mode]');\r\n\r\n    // If no mode element is found, default to light mode\r\n    if (!modeElement) {\r\n      return true;\r\n    }\r\n\r\n    return modeElement.getAttribute('data-mode') !== 'dark';\r\n  }\r\n\r\n  /**\r\n   * Checks if the current element is in dark mode.\r\n   * @returns True if the mode is dark, false if light.\r\n   */\r\n  public isDarkMode(): boolean {\r\n    return !this.isLightMode();\r\n  }\r\n\r\n  /**\r\n   * Checks if the current element is in a right-to-left (RTL) layout.\r\n   * @returns True if the element is in RTL layout, false otherwise.\r\n   */\r\n  public isRTL(): boolean {\r\n    return getComputedStyle(this).direction === 'rtl';\r\n  }\r\n\r\n  /**\r\n   * Emits a custom event from the component.\r\n   * @param eventName - The name of the event to emit.\r\n   * @param detail - Optional detail object to include with the event.\r\n   */\r\n  protected _emitEvent<T>(eventName: string, detail?: T) {\r\n    const event = new CustomEvent<T>(eventName, {\r\n      detail,\r\n      bubbles: true,\r\n      composed: true,\r\n    });\r\n    this.dispatchEvent(event);\r\n  }\r\n}\r\n"],"names":["PlBase","LitElement","modeElement","eventName","detail","event"],"mappings":";AAKO,MAAMA,UAAeC,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9B,cAAuB;AAG5B,UAAMC,IAAc,KAAK,QAAQ,aAAa;AAG9C,WAAKA,IAIEA,EAAY,aAAa,WAAW,MAAM,SAHxC;AAAA,EAIX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,aAAsB;AAC3B,WAAO,CAAC,KAAK,YAAA;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,QAAiB;AACtB,WAAO,iBAAiB,IAAI,EAAE,cAAc;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,WAAcC,GAAmBC,GAAY;AACrD,UAAMC,IAAQ,IAAI,YAAeF,GAAW;AAAA,MAC1C,QAAAC;AAAA,MACA,SAAS;AAAA,MACT,UAAU;AAAA,IAAA,CACX;AACD,SAAK,cAAcC,CAAK;AAAA,EAC1B;AACF;"}