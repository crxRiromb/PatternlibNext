// THIS FILE IS AUTO-GENERATED BY THE WRAPPER-GENERATOR SCRIPT. DO NOT EDIT.

import {
  Component,
  ChangeDetectionStrategy,
  Input,
  Output,
  EventEmitter,
  ElementRef,
  ViewChild,
  AfterViewInit,
  OnDestroy,
  CUSTOM_ELEMENTS_SCHEMA,
  booleanAttribute,
} from "@angular/core";
import type { PlIcon } from "@liebherr2/plnext";

@Component({
  selector: "pl-icon-angular",
  standalone: true,
  template: `
    <pl-icon
      #elementRef
      [attr.decorative]="decorative ? '' : null"
      [attr.iconName]="_iconName"
      [attr.label]="_label"
    >
      <ng-content></ng-content>
    </pl-icon>
  `,
  styles: [":host { display: inline-block; }"],
  changeDetection: ChangeDetectionStrategy.OnPush,
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
})
export class PlIconAngular implements AfterViewInit, OnDestroy {
  @ViewChild("elementRef") elementRef!: ElementRef<PlIcon>;
  private _listenerCtl = new AbortController();

  // --- Inputs (simple attributes) ---
  
  /** Maps to the "decorative" boolean attribute (present if true, absent if false). */
  @Input({ transform: booleanAttribute }) decorative: boolean = false;

  protected _iconName: string = "";
  /** Maps to the "iconName" string attribute. */
  @Input()
  set iconName(value: string | null | undefined) {
    this._iconName = (value ?? "") as string;
  }
  get iconName(): string {
    return this._iconName;
  }

  protected _label: string = "";
  /** Maps to the "label" string attribute. */
  @Input()
  set label(value: string | null | undefined) {
    this._label = (value ?? "") as string;
  }
  get label(): string {
    return this._label;
  }

  // --- Inputs (complex properties) ---
  

  // --- Outputs ---
  

  // --- Lifecycle hooks ---
  ngAfterViewInit() {
    const nativeElement = this.elementRef.nativeElement;
    
  }

  ngOnDestroy() {
    this._listenerCtl.abort();
  }
}