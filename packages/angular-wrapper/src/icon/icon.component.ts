// THIS FILE IS AUTO-GENERATED BY THE WRAPPER-GENERATOR SCRIPT. DO NOT EDIT.

import {
  Component,
  ChangeDetectionStrategy,
  Input,
  Output,
  EventEmitter,
  CUSTOM_ELEMENTS_SCHEMA,
  booleanAttribute,
} from "@angular/core";

// Side-effect import: registers this web component once at runtime
import "@liebherr2/plnext/components/icon/pl-icon.js";

@Component({
  selector: "pl-icon-angular",
  standalone: true,
  template: `
    <pl-icon
      [attr.decorative]="decorative ? '' : null"
      [attr.iconName]="_iconName"
      [attr.interactive]="interactive ? '' : null"
      [attr.label]="_label"
      (pl-icon-click)="plIconClick.emit($any($event))"
    >
      <ng-content></ng-content>
    </pl-icon>
  `,
  // styles: [":host { display: inline-block; }"],
  changeDetection: ChangeDetectionStrategy.OnPush,
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
})
export class PlIconAngular {
  // --- Inputs (simple attributes) ---
  
  /** Maps to the "decorative" boolean attribute (present if true, absent if false). */
  @Input({ transform: booleanAttribute }) decorative: boolean = false;

  protected _iconName: string = "";
  /** Maps to the "iconName" string attribute. */
  @Input()
  set iconName(value: string | null | undefined) {
    this._iconName = (value ?? "") as string;
  }
  get iconName(): string {
    return this._iconName;
  }

  /** Maps to the "interactive" boolean attribute (present if true, absent if false). */
  @Input({ transform: booleanAttribute }) interactive: boolean = false;

  protected _label: string = "";
  /** Maps to the "label" string attribute. */
  @Input()
  set label(value: string | null | undefined) {
    this._label = (value ?? "") as string;
  }
  get label(): string {
    return this._label;
  }

  // --- Inputs (complex properties) ---
  

  // --- Outputs ---
  
  /** Emits when the "pl-icon-click" event is fired by the web component. */
  @Output() plIconClick = new EventEmitter<CustomEvent<any>>();
}